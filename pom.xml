<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>fr.gouv.beta.fabnum</groupId>
	<artifactId>kelrisks</artifactId>
	<packaging>pom</packaging>
	<version>${revision}</version>

	<modules>
		<module>kelrisks-vue</module>
		<module>kelrisks-presentation</module>
	</modules>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
	</parent>

	<properties>
		<revision>v1.4.7</revision>

		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>

		<maven.apt.version>1.1.3</maven.apt.version>

		<!-- Versions non dÃ©finies par 'Spring Boot Dependencies' -->
		<mapstruct.version>1.2.0.Final</mapstruct.version>
		<springfox.version>2.9.2</springfox.version>
		<javax.ws.rs.version>2.0.1</javax.ws.rs.version>

		<geolatte.version>1.4.0</geolatte.version>
		<geolatte-common.version>0.8</geolatte-common.version>
		<com.vividsolutions.version>1.13</com.vividsolutions.version>
		<jsoup.version>1.11.3</jsoup.version>
		<itext7-core.version>7.1.13</itext7-core.version>
		<html2pdf.version>3.0.2</html2pdf.version>
		<redisson.version>3.13.6</redisson.version>

		<jib-maven-plugin.version>2.7.0</jib-maven-plugin.version>
		<registry>xxxx.xxx.xxx/</registry>
		<registry.repository>xxx</registry.repository>
	</properties>

	<build>
		<!-- Defines plugins that are used in the modules. -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>com.google.cloud.tools</groupId>
					<artifactId>jib-maven-plugin</artifactId>
					<version>${jib-maven-plugin.version}</version>
					<configuration>
						<container>
							<mainClass>fr.gouv.beta.fabnum.kelrisks.Application</mainClass>
						</container>
						<from>
							<image>gcr.io/distroless/java:11</image>
						</from>
						<to>
							<image>${registry}${registry.repository}/${project.artifactId}:${project.version}</image>
						</to>
						<!-- to not run the container with root, echo $(id -u):$(id -g) -->
						<container>
							<user>xxxx:xxxx</user>
						</container>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- <dependency> -->
		<!-- <groupId>org.springframework.boot</groupId> -->
		<!-- <artifactId>spring-boot-starter-jersey</artifactId> -->
		<!-- </dependency> -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
<!-- 			<exclusions> -->
<!-- 				<exclusion> -->
<!-- 					<groupId>org.springframework.boot</groupId> -->
<!-- 					<artifactId>spring-boot-starter-tomcat</artifactId> -->
<!-- 				</exclusion> -->
<!-- 			</exclusions> -->
		</dependency>
		<!-- la combinaison undertow et webclient est responsable de "freeze" de l'application -->
		<!-- quand la reponse du client demande trop de temps, aucun probleme avec Tomcat -->
<!-- 		<dependency> -->
<!-- 			<groupId>org.springframework.boot</groupId> -->
<!-- 			<artifactId>spring-boot-starter-undertow</artifactId> -->
<!-- 		</dependency> -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-spatial</artifactId>
		</dependency>

		<!-- GeoLatte -->
		<dependency>
			<groupId>org.geolatte</groupId>
			<artifactId>geolatte-geom</artifactId>
			<version>${geolatte.version}</version>
		</dependency>
		<dependency>
			<groupId>org.geolatte</groupId>
			<artifactId>geolatte-geojson</artifactId>
			<version>${geolatte.version}</version>
		</dependency>
		<dependency>
			<groupId>org.geolatte</groupId>
			<artifactId>geolatte-common</artifactId>
			<version>${geolatte-common.version}</version>
		</dependency>

		<!-- (Parsing des Geoms) Caused by: java.lang.ClassNotFoundException: com.vividsolutions.jts.io.ParseException -->
		<dependency>
			<groupId>com.vividsolutions</groupId>
			<artifactId>jts</artifactId>
			<version>${com.vividsolutions.version}</version>
		</dependency>

		<!-- (Deserialisation des Geoms) Caused by: java.lang.ClassNotFoundException: org.glassfish.jersey.internal.RuntimeDelegateImpl -->
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-common</artifactId>
		</dependency>


		<!-- the core, which includes Streaming API, shared low-level abstractions (but NOT data-binding) -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
		</dependency>

		<!-- Just the annotations; use this dependency if you want to attach annotations to classes without connecting them to the code. -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
		</dependency>

		<!-- databinding; ObjectMapper, JsonNode and related classes are here -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>

		<!-- to support JUnit 4 test -->
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.hamcrest</groupId>
					<artifactId>hamcrest-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<!-- <build> -->
	<!-- <plugins> -->
	<!-- <plugin> -->
	<!-- <groupId>org.flywaydb</groupId> -->
	<!-- <artifactId>flyway-maven-plugin</artifactId> -->
	<!-- <configuration> -->
	<!-- <skip>true</skip> -->
	<!-- </configuration> -->
	<!-- </plugin> -->
	<!-- </plugins> -->
	<!-- </build> -->
</project>
